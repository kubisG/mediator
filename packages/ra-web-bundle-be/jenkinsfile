properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
                        parameters([
                                booleanParam(defaultValue: true, description: 'Enable if you want build.', name: 'BUILD'),
						        booleanParam(defaultValue: false, description: 'Enable if you want deploy.', name: 'DEPLOY'),
                                booleanParam(defaultValue: true, description: 'Run ra-web bundle.', name: 'BUNDLE'),
                                stringParam(defaultValue: 'latest', description: 'Specific GIT revision to build', name: 'GIT_COMMIT'),
                                stringParam(defaultValue: 'test', description: 'Target environment', name: 'TARGET_ENV'),
                                stringParam(defaultValue: '612810951372.dkr.ecr.eu-west-1.amazonaws.com', description: 'ECR Registry', name: 'DOCKER_REGISTRY'),
                                stringParam(defaultValue: 'all', description: 'Components', name: 'COMPONENTS'),
                        ]),
			pipelineTriggers([pollSCM('H * * * *')])])
node("centos7"){
    try {
        timestamps {
            def scmVars;
                stage ('Clean') {
                    cleanWs()
                    deleteDir()
                }
                stage("Clone"){
                    scmVars = checkout scm;
                }
                stage('Bundle') {
                    if(params.BUNDLE){
                        build job: 'ra-web', parameters: [string(name: 'REPO_NAME', value: 'ra-web-bundle-be'), string(name: 'BRANCH_NAME', value: env.BRANCH_NAME), string(name: 'BUILD', value: (params.BUILD ? 'true' : 'false')), string(name: 'DEPLOY', value: (params.DEPLOY ? 'true' : 'false')), string(name: 'GIT_COMMIT', value: scmVars.GIT_COMMIT.take(8)), string(name: 'TARGET_ENV', value: params.TARGET_ENV), string(name: 'DOCKER_REGISTRY', value: params.DOCKER_REGISTRY), string(name: 'REPO_FOLDER', value: 'oms-fe'),string(name: 'COMPONENTS', value: params.COMPONENTS)], wait: false
                    }
                }
        }
    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)

}
