properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
                        parameters([stringParam(defaultValue: 'true', description: 'Enable if you want build.', name: 'BUILD'),
                        stringParam(defaultValue: 'false', description: 'Enable if you want to create bundle.', name: 'BUNDLE'),
                        stringParam(defaultValue: 'latest', description: 'Specific GIT revision to build', name: 'GIT_COMMIT'),
                        stringParam(defaultValue: '612810951372.dkr.ecr.eu-west-1.amazonaws.com', description: 'ECR Registry', name: 'DOCKER_REGISTRY'),
                        stringParam(defaultValue: 'develop', description: 'Repo branch', name: 'BRANCH_NAME'),
                        stringParam(description: 'Project name', name: 'PROJECT_NAME'),
                        stringParam(description: 'image name', name: 'IMG_NAME'),
                        ])
        ])
node("centos7"){
    try {
        timestamps {
            stage ('Clean') {
                cleanWs()
                deleteDir()
            }
            stage('Clone'){
                checkout([
                    $class: 'GitSCM',
                    branches: [
                        [name: '*/'+params.BRANCH_NAME]
                    ],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CleanCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false],
                        [$class: 'CheckoutOption', timeout: 10],
                        [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 10]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [
                        [credentialsId: 'hajek', url: 'git@bitbucket.org:rapid-addition/ra-web.git']
                    ]
                ]);
            }
            stage('Build'){
                if(params.BUILD == 'true'){
                    sh "git submodule foreach 'git checkout "+params.BRANCH_NAME+" || :'"
                    pushDocker(params.PROJECT_NAME,params.DOCKER_REGISTRY, params.IMG_NAME, params.GIT_COMMIT, params.BRANCH_NAME)
                }
            }
            stage('Bundle'){
                if(params.BUNDLE == 'true'){
                    def imageTag = "${params.BRANCH_NAME}.${(new Date().format( 'yyyyMMdd' ))}.${params.GIT_COMMIT}"
                    sh "git submodule foreach 'git checkout ${params.BRANCH_NAME} || :'"
                    sh "npm install"
                    sh "node ./scripts/builder/builder.js --project ${params.PROJECT_NAME} --rootDir ."
                    sh "mkdir bundle"
                    sh "mv ./packages/${params.PROJECT_NAME}/config ./bundle/config"
                    sh "mv ./packages/${params.PROJECT_NAME}/node_modules ./bundle/node_modules"
                    sh "cp -a ./node_modules/. ./bundle/node_modules"
                    sh "mv ./packages/${params.PROJECT_NAME}/dist ./bundle/dist"
                    sh "cp ./packages/${params.PROJECT_NAME}/package*.json ./bundle"
                    sh "cp ./packages/${params.PROJECT_NAME}/ecosystem.config.js ./bundle"
                    sh "mv ./packages/${params.PROJECT_NAME}/db ./bundle/db"
                    sh "tar -czvf ${params.IMG_NAME}.${imageTag}.tar.gz -C ./bundle ."
                    sh "aws s3 cp ${params.IMG_NAME}.${imageTag}.tar.gz s3://rapid-addition-build-transfer/development/jenkins/build-artifacts/ra-web/"
                }
            }
        }
    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result,params.REPO_NAME)
    }
}

void pushDocker(String project,String registry, String imgName, String shortHash, String branch) {
    def imageTag = branch+"."+(new Date().format( 'yyyyMMdd' ))+"."+shortHash
    def imageTagLatest = branch+"."+(new Date().format( 'yyyyMMdd' ))+".latest"
    sh "echo `aws ecr get-login --no-include-email --region eu-west-1` | sudo sh"
    sh "sudo docker system prune -f"
    sh "sudo docker build --build-arg project="+project+" . -t "+registry+"/"+imgName+":"+imageTag
    sh "sudo docker push "+registry+"/"+imgName+":"+imageTag
    // sh "sudo docker tag "+registry+"/"+imgName+":"+imageTag+" "+registry+"/"+imgName+":"+imageTagLatest
    // sh "sudo docker push "+registry+"/"+imgName+":"+imageTagLatest
}

def notifyBuild(String buildStatus = 'STARTED', String repo) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)

}
